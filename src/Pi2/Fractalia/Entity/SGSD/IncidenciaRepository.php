<?php

namespace Pi2\Fractalia\Entity\SGSD;

use Doctrine\ORM\EntityRepository;

/**
 * IncidenciaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IncidenciaRepository extends EntityRepository
{
    
    public function getTicketsFilterByDates($buzones, $campos, $condicion, $startyear, $startmonth, $endyear, $endmonth){
        $this->getEntityManager()->getConfiguration()->addCustomStringFunction('YEAR', 'Pi2\Fractalia\DBAL\Functions\Year');
        $this->getEntityManager()->getConfiguration()->addCustomStringFunction('MONTH', 'Pi2\Fractalia\DBAL\Functions\Month');
        
        $query = $this->getEntityManager()->createQuery(
                "SELECT " . $campos . " FROM Pi2\Fractalia\Entity\SGSD\Incidencia i
                 WHERE 
                 i.grupoDestino in (:buzones) 
                 AND 
                 (i.hideInMonitor IS NULL OR i.hideInMonitor = 0) 
                 AND 
                 (" . $condicion . "
                 AND
                 (
                 (YEAR( i.fechaApertura ) >= :syear AND MONTH( i.fechaApertura ) >= :smonth) 
                    AND 
                 (YEAR( i.fechaApertura ) <= :eyear AND MONTH( i.fechaApertura ) <= :emonth) 
                 ) 
                ORDER BY i.fechaApertura desc"
            )
            ->setParameters(array(
                'buzones' => $buzones,
                'syear' => $startyear,
                'smonth' => $startmonth,
                'eyear' => $endyear,
                'emonth' => $endmonth,
            )
        );

        try
        {
            return $query->getResult();
        }
        catch (\Doctrine\Orm\NoResultException $e)
        {
            return null;
        }
        catch (\Doctrine\Orm\ORMException $e)
        {
            return $e;
        }
    }

    //Se obtienen todos los tickets de todas las categorias de un servicio y parametros dados
    public function getTickets($buzones, $campos, $condicion)
    {
        $query = $this->getEntityManager()->createQuery(
                "SELECT " . $campos . " FROM Pi2\Fractalia\Entity\SGSD\Incidencia i
                 WHERE i.grupoDestino in (:buzones) AND (i.hideInMonitor IS NULL OR i.hideInMonitor = 0) AND (" . $condicion . " 
                 ORDER BY i.fechaActualizacion asc")
            ->setParameters(array('buzones' => $buzones));

        try
        {
            return $query->getResult();
        }
        catch (\Doctrine\Orm\NoResultException $e)
        {
            return null;
        }
        catch (\Doctrine\Orm\ORMException $e)
        {
            return $e;
        }
    }
    

    //Se obtiene la fecha de introducción del ticket en la BBDD con las condiciones de alarma parametrizadas
    public function getFechaInsercionTicketConBuzon($numeroCaso, $buzones)
    {
        $query = $this->getEntityManager()->createQuery(
                "SELECT i.fechaInsercion FROM Pi2\Fractalia\Entity\SGSD\Incidencia i
                 WHERE i.numeroCaso = :numeroCaso AND i.grupoDestino not in (:buzones)")
            ->setParameters(array('numeroCaso' => $numeroCaso,
                'buzones' => $buzones))
            ->setMaxResults(1);

        try
        {
            return $query->getSingleResult();
        }
        catch (\Doctrine\Orm\NoResultException $e)
        {
            return null;
        }
    }

    //
    public function getFechaInsercionTicketSinBuzon($numeroCaso)
    {
        $query = $this->getEntityManager()->createQuery(
                "SELECT i.fechaInsercion FROM Pi2\Fractalia\Entity\SGSD\Incidencia i
                 WHERE i.numeroCaso = :numeroCaso")
            ->setParameters(array('numeroCaso' => $numeroCaso))
            ->setMaxResults(1);

        try
        {
            return $query->getSingleResult();
        }
        catch (\Doctrine\Orm\NoResultException $e)
        {
            return null;
        }
    }

    //Se obtiene el ultimo ticket insertado en la BBDD
    public function getTiempoUltimoTicket($buzones)
    {
        //WHERE i.servicioAfectado=:servicio AND i.fechaInsercion IN 
        $query = $this->getEntityManager()->createQuery(
                "SELECT i.fechaInsercion FROM Pi2\Fractalia\Entity\SGSD\Incidencia i         
                 WHERE i.grupoDestino in (:buzones) AND i.fechaInsercion IN 
                    (SELECT MAX(i2.fechaInsercion) FROM Pi2\Fractalia\Entity\SGSD\Incidencia i2
                     WHERE i2.grupoDestino in (:buzones))")
            ->setParameter('buzones', $buzones)
            ->setMaxResults(1);

        try
        {
            return $query->getSingleResult();
        }
        catch (\Doctrine\Orm\NoResultException $e)
        {
            return null;
        }
    }

    //Se obtiene el ultimo ticket insertado en la BBDD
    public function getUltimaInsercion($buzones)
    {
        //WHERE i.servicioAfectado=:servicio AND i.fechaInsercion IN 
        $query = $this->getEntityManager()->createQuery(
                "SELECT MAX(i.fechaInsercion) AS fechaInsercion FROM Pi2\Fractalia\Entity\SGSD\Incidencia i
                     WHERE i.grupoDestino in (:buzones)")
            ->setParameter('buzones', $buzones);
//            ->setMaxResults(1)

        try
        {
            return $query->getSingleResult();
        }
        catch (\Doctrine\Orm\NoResultException $e)
        {
            return null;
        }
    }

    //Se comprueba si el ticket pertenece a un cliente crítico 
    public function getExisteClienteCritico($numeroCaso, $sql)
    {
        $query = $this->getEntityManager()->createQuery(
                "SELECT i.cliente FROM Pi2\Fractalia\Entity\SGSD\Incidencia i
                 WHERE (i.numeroCaso = :numeroCaso) AND (" . $sql . ")")
            ->setParameter('numeroCaso', $numeroCaso);
        try
        {
            return $query->getSingleScalarResult();
        }
        catch (\Doctrine\Orm\NoResultException $e)
        {
            return null;
        }
    }

    /**
     * Retorna un array con los datos para generar el mensaje de RESUMEN
     * Esta Query se debe lanzar cada cierto periodo configurado en crontab
     * 
     * @param array $estados
     * @param array $servicio
     * @return string
     */
    public function getResumen($estados, $servicio = null)
    {
//        $estados = array('Open', 'Work In Progress', 'Suspended');
        $missing = "missing";
        $ficticio = "ficticio";
        $query = $this->getEntityManager()->createQuery(
                "SELECT COALESCE(NULLIF(i.numeroCaso, ''),(:missing)) AS numeroCaso,
                    lower(COALESCE(NULLIF(i.estado, ''),(:missing))) AS estado,
                    lower(COALESCE(NULLIF(i.grupoDestino, ''), NULLIF(i.grupoOrigen, ''),(:ficticio))) AS destino 
                    FROM Pi2\Fractalia\Entity\SGSD\Incidencia i WHERE 
                    (i.estado in (:estados) AND (i.hideInMonitor IS NULL OR i.hideInMonitor = 0) AND (i.grupoOrigen in (:servicio) OR i.grupoDestino in (:servicio)))")->setParameters(array('estados' => $estados,
            'servicio' => $servicio, 'missing' => $missing, 'ficticio' => $ficticio)
        );


        try
        {
            $resultado = $query->getResult();
            if (count($resultado) == 0)
            {

                return '"No hay tickets pendientes".';
            }
            if (count($resultado) > 0)
            {
                return $resultado;
            }
        }
        catch (\Doctrine\Orm\NoResultException $e)
        {
            return null;
        }
    }

    /**
     * Busca Incidencias por antiguedad por defecto 7 dias
     * Se excluyen el buzon "N1 PT 3GH"
     * 
     * @param int $antiguedad
     */
    public function findByAntiguedad($antiguedad = 7)
    {
        
        $resolved = '%resolved%';
        $resuelto = '%resuelto%';
        $closed = '%closed%';
        $cerrado = '%cerrado%';
        $grupo = '%N1 PT 3GH%';
        $query = $this->getEntityManager()->createQuery(
                "SELECT i.id AS id FROM Pi2\Fractalia\Entity\SGSD\Incidencia i WHERE 
                    (i.grupoOrigen NOT LIKE :grupo AND i.grupoDestino NOT LIKE :grupo)
                AND 
                    (i.estado LIKE :resolved OR i.estado LIKE :resuelto
                        OR 
                    i.estado LIKE :closed OR i.estado LIKE :cerrado)
                    AND 
                    (i.fechaInsercion < DATE_SUB(CURRENT_DATE(), :antiguedad, 'DAY'))
                "
            )->setParameters(
            array(
                'grupo' => $grupo,
                'resolved' => $resolved,
                'resuelto' => $resuelto,
                'closed' => $closed,
                'cerrado' => $cerrado,
                'antiguedad' => $antiguedad,
            )
        );


        try
        {
            $resultado = $query->getResult();
            if (count($resultado) == 0)
            {

                return 0;
            }
            if (count($resultado) > 0)
            {
                return $resultado;
            }
        }
        catch (\Doctrine\Orm\NoResultException $e)
        {
            return null;
        }
    }
    /**
     * Busca Incidencias por antiguedad por defecto 30 dias
     * Se incluye solo el buzon "N1 PT 3GH"
     * 
     * @param int $antiguedad
     */
    public function findByAntiguedadFerrovial($antiguedad = 30)
    {
        
        $resolved = '%resolved%';
        $resuelto = '%resuelto%';
        $closed = '%closed%';
        $cerrado = '%cerrado%';
        $grupo = '%N1 PT 3GH%';
        $query = $this->getEntityManager()->createQuery(
                "SELECT i.id AS id FROM Pi2\Fractalia\Entity\SGSD\Incidencia i WHERE 
                    (i.grupoOrigen LIKE :grupo OR i.grupoDestino LIKE :grupo)
                AND 
                    (i.estado LIKE :resolved OR i.estado LIKE :resuelto
                        OR 
                    i.estado LIKE :closed OR i.estado LIKE :cerrado)
                    AND 
                    (i.fechaInsercion < DATE_SUB(CURRENT_DATE(), :antiguedad, 'DAY'))
                "
            )->setParameters(
            array(
                'grupo' => $grupo,
                'resolved' => $resolved,
                'resuelto' => $resuelto,
                'closed' => $closed,
                'cerrado' => $cerrado,
                'antiguedad' => $antiguedad,
            )
        );


        try
        {
            $resultado = $query->getResult();
            if (count($resultado) == 0)
            {
                return 0;
            }
            if (count($resultado) > 0)
            {
                return $resultado;
            }
        }
        catch (\Doctrine\Orm\NoResultException $e)
        {
            return null;
        }
    }
    
    /**
     * Busca los tickets 
     * Asignados al Usuario en los Buzones
     * 
     * @param int $antiguedad
     */
    public function findTicketsByUserInBuzones($usuario, $buzones)
    {
        
        $workinprogress = '%work in progress%';
        $enproceso = '%en proceso%';
        $suspended = '%suspended%';
        $parado = '%parado%';
        $query = $this->getEntityManager()->createQuery(
                "SELECT i.numeroCaso FROM Pi2\Fractalia\Entity\SGSD\Incidencia i WHERE
                    i.tecnicoAsignadoInicial LIKE :user
                AND
                    i.grupoDestino IN (:buzon)
                AND 
                    (i.estado LIKE :wip OR i.estado LIKE :enp OR i.estado LIKE :susp OR i.estado LIKE :parado)
                "
            )->setParameters(
            array(
                'user' => "%".$usuario ."%",
                'wip' => $workinprogress,
                'enp' => $enproceso,
                'susp' => $suspended,
                'parado' => $parado,
                'buzon' => $buzones,
            )
        );


        try
        {
            $resultado = $query->getResult();
            if (count($resultado) == 0)
            {
                return 0;
            }
            if (count($resultado) > 0)
            {
                return $resultado;
            }
        }
        catch (\Doctrine\Orm\NoResultException $e)
        {
            return null;
        }
    }

}
