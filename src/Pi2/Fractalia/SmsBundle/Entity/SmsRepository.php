<?php

namespace Pi2\Fractalia\SmsBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * NombrecortoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SmsRepository extends EntityRepository
{

    /**
     * Se obitienen los sms buscados en caso de encontrarlos
     * 
     * @param string $string cadena a buscar
     * @return mixed collection or null or \Doctrine\Orm\ORMException
     */
    public function findByString($string)
    {

        //Patron para identificar la fecha en el string
        $pattern = "/^(\d{2})-(\d{2})-(\d{2})-(\d{2})-(\d{2})-(\d{2})$/";
        $matches = array();
        $fecha = null;
        if (1 == preg_match($pattern, $string, $matches) and count($matches) == 7)
        {
            $datetime = $this->getDateTime($string);
            $fecha = $datetime->format("Y-m-d H:i:s");
        }
        $query = $this->getEntityManager()->createQuery(
                "SELECT s.estadoEnvio as estadoenvio, s.id as id, s.destinatario as destinatario, s.respuestaApi as respuestaapi, s.fechaCreacion as fechaCreacion, m.texto as texto, m.nombrePlantilla as nombreplantilla 
                    FROM FractaliaSmsBundle:Sms AS s
                        INNER JOIN FractaliaSmsBundle:Mensaje AS m
                            WITH m.id = s.mensaje
                    WHERE
                        s.estadoEnvio in ('ERROR', 'POR_ENVIAR', 'ERROR_BUILD', 'ENVIADO', 'ASENTIDO')
                    AND
                    (                        
                        s.destinatario = :string OR
                        s.estadoEnvio = :string OR
                        s.respuestaApi = :string OR
                        s.fechaCreacion = :datetime OR
                        m.nombrePlantilla = :string OR
                        m.texto LIKE :pattern
                    )
                    ORDER BY 
                        s.fechaCreacion DESC"
            )->setParameters(
            array(
                'string' => $string,
                'pattern' => "%" . $string . "%",
                'datetime' => (is_null($fecha)) ? $string : $fecha,
            )
        );
        try
        {
            return $query->getResult();
        }
        catch (\Doctrine\Orm\NoResultException $e)
        {
            return null;
        }
        catch (\Doctrine\Orm\ORMException $e)
        {
            return $e;
        }
    }

    /**
     * Buscar los sms con un texto exacto y el grupo de contacto 
     * 
     * @param string $texto
     * @param string $contactGroup
     * @return \Doctrine\Orm\ORMException
     */
    public function findByMessageTextAndSmsContactGroup($texto, $contactGroup)
    {
        $query = $this->getEntityManager()->createQuery(
                "SELECT s 
                    FROM FractaliaSmsBundle:Sms s
                    INNER JOIN FractaliaSmsBundle:Mensaje m
                    WITH m.id = s.mensaje
                    WHERE
                        s.destinatario = :contactGroup
                    AND
                        m.texto LIKE :texto"
            )->setParameters(
            array(
                'texto' => $texto,
                'contactGroup' => $contactGroup,
            )
        );
        try
        {
            return $query->getResult();
        }
        catch (\Doctrine\Orm\NoResultException $e)
        {
            return null;
        }
        catch (\Doctrine\Orm\ORMException $e)
        {
            return $e;
        }
    }
    
    public function getSmsAndMessageJoined(){
        
        $query = $this->getEntityManager()->createQuery(
                "SELECT Sms.estadoEnvio as estadoenvio, Sms.id as id, Sms.destinatario as destinatario, Sms.respuestaApi as respuestaapi, Sms.fechaCreacion as fechaCreacion, Mensaje.texto as texto, Mensaje.nombrePlantilla as nombreplantilla
                    FROM FractaliaSmsBundle:Sms AS Sms
                        INNER JOIN FractaliaSmsBundle:Mensaje AS Mensaje
                            WITH Mensaje.id = Sms.mensaje
                    WHERE
                        Sms.estadoEnvio in ('ERROR', 'POR_ENVIAR', 'ERROR_BUILD', 'ENVIADO', 'ASENTIDO')
                    ORDER BY 
                        Sms.fechaCreacion DESC"
                 );

        try
        {
            return $query->getResult();
        }
        catch (\Doctrine\Orm\NoResultException $e)
        {
            return null;
        }
        catch (\Doctrine\Orm\ORMException $e)
        {
            return $e;
        }
        
    }

    /**
     * Contar los Sms que tiene un grupo de contacto
     * 
     * @param type $contactGroup
     * @return \Doctrine\Orm\ORMException
     */
    public function countSmsByGroup($contactGroup)
    {
        $query = $this->getEntityManager()->createQuery(
                "SELECT COUNT(s.destinatario)
                FROM FractaliaSmsBundle:Sms s
                WHERE s.destinatario = :contactGroup"
            )->setParameters(
            array(
                'contactGroup' => $contactGroup,
            )
        );
        try
        {
            return $query->getSingleScalarResult();
        }
        catch (\Doctrine\Orm\NoResultException $e)
        {
            return null;
        }
        catch (\Doctrine\Orm\ORMException $e)
        {
            return $e;
        }
    }

    /**
     * Busca el ultimo sms enviado con el texto exacto 
     * 
     * @param string $texto
     * @return \Doctrine\Orm\ORMException
     */
    public function findOneByMessageText($texto)
    {
        $enviado = "ENVIADO";

        $query = $this->getEntityManager()->createQuery(
                "SELECT s 
                    FROM FractaliaSmsBundle:Sms s
                    INNER JOIN FractaliaSmsBundle:Mensaje m
                    WITH m.id = s.mensaje
                    WHERE
                        s.estadoEnvio = :enviado
                    AND
                        s.fechaEnvio IS NOT NULL
                    AND
                        m.texto LIKE :texto 
                    ORDER BY 
                        s.id DESC"
            )->setParameters(
            array(
                'texto' => $texto,
                'enviado' => $enviado,
            )
        );
        try
        {
            return $query->getResult();
        }
        catch (\Doctrine\Orm\NoResultException $e)
        {
            return null;
        }
        catch (\Doctrine\Orm\ORMException $e)
        {
            return $e;
        }
    }

    /**
     * Busca el ultimo sms enviado con el texto exacto 
     * 
     * @param string $texto
     * @return \Doctrine\Orm\ORMException
     */
    public function getTextsFromLastSmss($cantidad = 15)
    {
        $enviado = "ENVIADO";

        $query = $this->getEntityManager()->createQuery(
                "SELECT m.texto , s.id
                    FROM FractaliaSmsBundle:Sms s
                    INNER JOIN FractaliaSmsBundle:Mensaje m
                    WITH m.id = s.mensaje
                    WHERE
                        s.estadoEnvio = :enviado
                    AND
                        s.fechaEnvio IS NOT NULL 
                    ORDER BY 
                        s.id DESC"
            )->setParameters(
                array(
                    'enviado' => $enviado,
                )
            )
            ->setMaxResults($cantidad);
        try
        {
            return $query->getResult();
        }
        catch (\Doctrine\Orm\NoResultException $e)
        {
            return null;
        }
        catch (\Doctrine\Orm\ORMException $e)
        {
            return $e;
        }
    }

    protected function getDateTime($string)
    {

        return date_create_from_format('d-m-y-G-i-s', $string);
    }

}
